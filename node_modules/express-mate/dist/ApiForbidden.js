"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var http_status_1 = __importDefault(require("http-status"));
var Responder_1 = require("./Responder");
var settings_1 = require("./settings");
var ApiForbidden = /** @class */ (function () {
    function ApiForbidden(res, message, meta) {
        if (message === void 0) { message = 'Insufficient permissions'; }
        if (meta === void 0) { meta = {}; }
        this.message = message;
        this.meta = meta;
        this.res = res;
    }
    ApiForbidden.respond = function (res, message, opt) {
        if (opt === void 0) { opt = {}; }
        var _a = opt.responseFormat, responseFormat = _a === void 0 ? settings_1.Settings.responseFormat : _a, meta = opt.meta;
        var instance = new ApiForbidden(res, message, meta);
        return Responder_1.triggerResponder(instance, responseFormat);
    };
    Object.defineProperty(ApiForbidden.prototype, "status", {
        get: function () {
            return ApiForbidden.status;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ApiForbidden.prototype, "code", {
        get: function () {
            return ApiForbidden.code;
        },
        enumerable: true,
        configurable: true
    });
    ApiForbidden.prototype.raw = function () {
        this.res.status(this.code).send(this.message);
    };
    ApiForbidden.prototype.jsend = function () {
        this.res.status(this.code).json(__assign(__assign({}, this.meta), { status: this.status, message: this.message }));
    };
    ApiForbidden.status = 'error';
    ApiForbidden.code = http_status_1.default.FORBIDDEN;
    return ApiForbidden;
}());
exports.ApiForbidden = ApiForbidden;
