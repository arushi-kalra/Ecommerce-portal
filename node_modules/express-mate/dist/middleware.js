"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var express_1 = require("express");
var debug_1 = __importDefault(require("debug"));
var baseLogger = debug_1.default('express-mate:middleware');
var ApiError_1 = require("./ApiError");
var Responder_1 = require("./Responder");
var settings_1 = require("./settings");
function errorHandler(opt) {
    if (opt === void 0) { opt = {}; }
    return function (err, _, res, next) {
        var _a = settings_1.injectSettings(opt), handleErrors = _a.handleErrors, ignoreNativeErrors = _a.ignoreNativeErrors, responseFormat = _a.responseFormat;
        var log = baseLogger.extend('errorHandler');
        if (handleErrors) {
            try {
                if (!res.headersSent) {
                    var responder = void 0;
                    if (ApiError_1.isApiError(err)) {
                        log('caught error responder');
                        responder = err;
                    }
                    else if (!ignoreNativeErrors) {
                        log('caught native error');
                        log('attempting to wrap error: %', err);
                        var wrap = ApiError_1.wrapError(res, err);
                        if (ApiError_1.isApiError(wrap)) {
                            log('successfully wrapped error');
                            responder = wrap;
                        }
                        else {
                            log('failed to wrap error');
                        }
                    }
                    if (responder) {
                        return Responder_1.triggerResponder(responder, responseFormat);
                    }
                }
                else {
                    log('headers already sent, ignoring errors');
                }
            }
            catch (_err) {
                log('error occurred whilst processing error: %s', _err.stack);
            }
        }
        else {
            log('error handling disabled, passing error to next()');
            return next(err);
        }
    };
}
exports.errorHandler = errorHandler;
function createHandler(handler, opt) {
    if (opt === void 0) { opt = {}; }
    var responseFormat = settings_1.injectSettings(opt).responseFormat;
    var log = baseLogger.extend('createHandler');
    return function (req, res, next) {
        Promise.resolve(handler(req, res, next))
            .then(function (result) {
            try {
                if (!res.headersSent) {
                    if (Responder_1.isResponder(result)) {
                        log('captured responder');
                        return Responder_1.triggerResponder(result, responseFormat);
                    }
                }
                else {
                    log('headers already sent, ignoring responders');
                }
            }
            catch (err) {
                log('error occurred whilst processing request result: %s', err.stack);
            }
        })
            .catch(function (err) {
            return errorHandler(opt)(err, req, res, next);
        });
    };
}
exports.createHandler = createHandler;
function createHook(path, cb, opt) {
    if (opt === void 0) { opt = {}; }
    return function (root) {
        var router = express_1.Router(__assign({ mergeParams: true }, opt.routerOptions));
        cb(router, root);
        root.use(path, router);
    };
}
exports.createHook = createHook;
